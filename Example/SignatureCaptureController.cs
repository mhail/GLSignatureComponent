// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.GLKit;
using GLSignature;
using MonoTouch.UIKit;

namespace Example
{
	public class SignatureCaptureEventArgs : EventArgs
	{
		public UIImage Signature { get; set; }
		public bool HasSignature { get; set; }
	}

	public partial class SignatureCaptureController : GLSignatureCaptureController
	{
		private UIImage _image;

		public event EventHandler<SignatureCaptureEventArgs> SignatureCaptured;

		public SignatureCaptureController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			this.EraseButton.TouchUpInside += (object sender, EventArgs e) => {
				this.Erase();
			};
		}

		private bool IsPortrait(UIInterfaceOrientation orientation)
		{
			return UIInterfaceOrientation.Portrait == orientation;
		}

		public override void WillRotate (UIInterfaceOrientation toInterfaceOrientation, double duration)
		{
			// The image needs to be captured before it is rotated.
			if (IsPortrait (toInterfaceOrientation)) {
				if (null != _image) {
					_image.Dispose ();
				}
				_image = this.Signature;
			}

			base.WillRotate (toInterfaceOrientation, duration);
		}

		public override void DidRotate (UIInterfaceOrientation fromInterfaceOrientation)
		{
			base.DidRotate (fromInterfaceOrientation);

			if (IsPortrait(this.InterfaceOrientation)) {

				NotifySignatureCaptured ();

				this.DismissViewController (true, null);
			} 
		}

		private void NotifySignatureCaptured()
		{
			if (null != SignatureCaptured) {

				var args = new SignatureCaptureEventArgs () 
				{
					Signature = _image,
					HasSignature = this.HasSignature,
				};

				SignatureCaptured (this, args);
			}
		}
	}
}
